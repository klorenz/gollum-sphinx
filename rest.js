// Generated by CoffeeScript 1.9.1

/*
*  RestructuredText Language Definition
*
*  A language definition for string manipulation operations, in this case
*  for the Markdown, uh, markup language. Uses regexes for various functions
*  by default. If regexes won't do and you need to do some serious
*  manipulation, you can declare a function in the object instead.
*
*  Code example:
*  'functionbar-id'  :   {
*                          exec: function(text, selectedText) {
*                                   functionStuffHere();
*                                },
*                          search: /somesearchregex/gi,
*                          replace: 'replace text for RegExp.replace',
*                          append: "just add this where the cursor is"
*                         }
*
 */

(function() {
  (function($) {
    var RestHelp, RestructuredText, entry, escapeHtml, href, info, j, len, makeHeadline, name, options, page, path, project, ref, role, thisProject;
    makeHeadline = function(text, headlineChar) {
      var j, len, line, lines, m, repText;
      lines = text.split("\n");
      repText = '';
      for (j = 0, len = lines.length; j < len; j++) {
        line = lines[j];
        if (m = line.match(/(.+)([\n]?)/)) {
          repText += (line + "\n") + headlineChar.repeat(line.length) + "\n\n";
        }
      }
      return repText;
    };
    $.GollumDialog.createFieldMarkup = function(fieldArray) {
      var field, fieldMarkup, j, len;
      fieldMarkup = '<fieldset>';
      for (j = 0, len = fieldArray.length; j < len; j++) {
        field = fieldArray[j];
        fieldMarkup += '<div class="field">';
        if (typeof field === 'object') {
          switch (field.type) {
            case 'text':
              fieldMarkup += $.GollumDialog.createFieldText(field);
              break;
            case 'file':
              fieldMarkup += $.GollumDialog.createFieldFile(field);
              break;
            case 'select':
              fieldMarkup += $.GollumDialog.createFieldSelect(field);
          }
        }
        fieldMarkup += '</div>';
      }
      fieldMarkup += '</fieldset>';
      return fieldMarkup;
    };
    escapeHtml = function(s) {
      return s.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
    };
    $.GollumDialog.createFieldSelect = function(field) {
      var context, defaultValue, html, id, j, len, name, option, options, size, type, value;
      name = field.name, id = field.id, defaultValue = field.defaultValue, type = field.type, context = field.context, options = field.options, size = field.size;
      html = '';
      if (name != null) {
        html += '<label';
        if (id != null) {
          html += " for=\"gollum-dialog-dialog-generated-field-" + id + "\"";
        }
        html += ">" + name + "</label>";
      }
      html += '<select ';
      if (id != null) {
        html += " name=\"" + id + "\" id=\"gollum-dialog-dialog-generated-field-" + id + "\"";
        if (size != null) {
          html += " size=\"" + size + "\"";
        }
        if (type === 'code') {
          html += ' class="code"';
        }
        html += ">";
      }
      for (j = 0, len = options.length; j < len; j++) {
        option = options[j];
        if (typeof option === 'string') {
          option = {
            name: option,
            value: option
          };
        }
        name = option.name, value = option.value;
        if (name != null) {
          if (value == null) {
            value = name;
          }
        }
        if (value != null) {
          if (name == null) {
            name = value;
          }
        }
        name = escapeHtml(name);
        value = escapeHtml(value);
        html += "<option value=\"" + value + "\">" + name + "</option>";
      }
      html += "</select>";
      return html;
    };
    thisProject = document.location.toString().match(/\/intranet[^\/]*\/([^\/]*)/)[1];
    options = [];
    ref = DOCUMENTATION_OPTIONS.FIND_ANYTHING_ENTRIES;
    for (j = 0, len = ref.length; j < len; j++) {
      entry = ref[j];
      if (entry.href.match(/#/)) {
        continue;
      }
      info = entry.info, name = entry.name, path = entry.path, project = entry.project, href = entry.href;
      page = href.match(/\/([^\/]*)\.html$/)[1];
      if (project === thisProject) {
        role = 'doc';
      } else {
        role = project;
      }
      options.push({
        name: info + ": " + name,
        value: ":" + role + ":`" + path + page + "`"
      });
    }
    RestructuredText = {
      'function-bold': {
        search: /([^\n]+)([\n\s]*)/g,
        replace: "**$1**$2"
      },
      'function-italic': {
        search: /([^\n]+)([\n\s]*)/g,
        replace: "*$1*$2"
      },
      'function-code': {
        search: /([^\n]+)([\n\s]*)/g,
        replace: "``$1``$2"
      },
      'function-hr': {
        append: "\n----------\n"
      },
      'function-ul': {
        search: /(.+)([\n]?)/g,
        replace: "* $1$2"
      },
      'function-ol': {
        exec: function(txt, selText, $field) {
          var count, hasContent, k, len1, line, lines, repText;
          count = 1;
          repText = '';
          lines = selText.split("\n");
          hasContent = /[\w]+/;
          for (k = 0, len1 = lines.length; k < len1; k++) {
            line = lines[k];
            if (line.match(hasContent)) {
              repText += (i + 1).toString() + '. ' + line + "\n";
            }
          }
          return $.GollumEditor.replaceSelection(repText);
        }
      },
      'function-blockquote': {
        search: /(.+)([\n]?)/g,
        replace: "| $1$2"
      },
      'function-h1': {
        exec: function(txt, selText, $field) {
          return $.GollumEditor.replaceSelection(makeHeadline(selText, "="));
        }
      },
      'function-h2': {
        exec: function(txt, selText, $field) {
          return $.GollumEditor.replaceSelection(makeHeadline(selText, "-"));
        }
      },
      'function-h3': {
        exec: function(txt, selText, $field) {
          return $.GollumEditor.replaceSelection(makeHeadline(selText, '"'));
        }
      },
      'function-link': {
        exec: function(txt, selText, $field) {
          var results;
          results = null;
          return $.GollumEditor.Dialog.init({
            title: 'Insert Link',
            fields: [
              {
                id: 'text',
                name: 'Link Text',
                type: 'text',
                defaultValue: selText
              }, {
                id: 'href',
                name: 'URL',
                type: 'text'
              }, {
                id: 'doc',
                name: 'Or Select',
                type: 'select',
                options: options
              }
            ],
            OK: function(res) {
              var rep, text;
              rep = '';
              console.log(res);
              $('#gollum-dialog-dialog-body select').each(function() {
                return res[$(this).attr('name')] = $(this).val();
              });
              if (res['href']) {
                if (res['text'] && res['href']) {
                  rep = '`' + res['text'] + ' <' + res['href'] + '>`_';
                }
              } else {
                rep = res['doc'];
                if (text = res['text']) {
                  rep = rep.replace(/:`(.*)`/, ":`" + text + " <$1>`");
                }
                console.log(rep);
              }
              return $.GollumEditor.replaceSelection(rep);
            }
          });
        }
      }
    };

    /*
    ,
    
      'function-image'      :   {
                                  exec: function( txt, selText, $field ) {
                                    var results = null;
                                    $.GollumEditor.Dialog.init({
                                      title: 'Insert Image',
                                      fields: [
                                        {
                                          id: 'url',
                                          name: 'Image URL',
                                          type: 'text'
                                        },
                                        {
                                          id: 'alt',
                                          name: 'Alt Text',
                                          type: 'text'
                                        }
                                      ],
                                      OK: function( res ) {
                                        var rep = '';
                                        if ( res['url'] && res['alt'] ) {
                                          rep = '![' + res['alt'] + ']' +
                                                '(' + res['url'] + ')';
                                        }
                                        $.GollumEditor.replaceSelection( rep );
                                      }
                                    });
                                  }
                                }
     */
    RestHelp = [
      {
        menuName: 'Block Elements',
        content: [
          {
            menuName: 'Paragraphs &amp; Breaks',
            data: "<p>\n  To create a paragraph, simply create a block of text\n  that is not separated by one or more blank lines.\n  Blocks of text separated by one or more blank lines\n  will be parsed as paragraphs.\n</p>"
          }, {
            menuName: 'Headers',
            data: "<p>\n  To create a header underline a single line with\n  characters like \"=\", \"-\", \"\'\", , '~', etc.  Same\n  character underlining mean same header level.\n</p><p>\n  Example:\n  <pre>\n  This is a Heading\n  =================\n  </pre>\n</p>"
          }, {
            menuName: 'Lists',
            data: "<p>\n  To create an ordered list, simply prefix each line\n  with a number followed by a \".\" (any number will do\n  &mdash; this is why the editor only uses one number.)\n  To create an unordered list, you can prefix each line\n  with <code>*</code>, <code>+</code> or\n  <code>-</code>.\n</p><p>\n  List items can contain multiple paragraphs, however\n  each paragraph must be indented like first line in list\n  (after listitem character)\n</p><p>\n  Example:\n  <pre>\n  - first item\n  - second item\n    with more lines\n\n    Another Paragraph\n\n  - third item\n  </pre>\n</p>"
          }, {
            menuName: 'Code Blocks',
            data: "<p>\n  There are basically ways of\n  <a href=\"http://sphinx-doc.org/markup/code.html\">creating\n  codeblocks</a>, explicit or implicit.\n</p><p>\n  You can create an explicit codeblock with\n  <code>code-block</code> directive followed by type of code\n  for highlighting:\n  <pre>\n  .. code-block:: python\n\n      def foo():\n          return \"bar\"\n  </pre>\n</p><p>\n  You can create an implicit codeblock using the current\n  highlighting by simply ending a line with a double colon\n  followed by an empty line.  Following code must be indented\n  like in following example:\n  <pre>\n  Here is some code::\n\n      def foo():\n          return \"bar\"\n  </pre>\n</p><p>\n  You can change highlighting with highlight directive:\n  <pre>\n  .. highlight:: cpp\n  </pre><\n</p>"
          }, {
            menuName: 'Horizontal Rules',
            data: "Horizontal rules are created by placing four or more\npunctuation characters like hyphens or dots in one line\nand nothing else."
          }
        ]
      }, {
        menuName: 'Span Elements',
        content: [
          {
            menuName: 'Links',
            data: '<p>Markdown has two types of links: <strong>inline</strong> and <strong>reference</strong>. For both types of links, the text you want to display to the user is placed in square brackets. For example, if you want your link to display the text &ldquo;GitHub&rdquo;, you write <code>[GitHub]</code>.</p><p>To create an inline link, create a set of parentheses immediately after the brackets and write your URL within the parentheses. (e.g., <code>[GitHub](http://github.com/)</code>). Relative paths are allowed in inline links.</p><p>To create a reference link, use two sets of square brackets. <code>[my internal link][internal-ref]</code> will link to the internal reference <code>internal-ref</code>.</p>'
          }, {
            menuName: 'Emphasis',
            data: '<p>Asterisks (<code>*</code>) and underscores (<code>_</code>) are treated as emphasis and are wrapped with an <code>&lt;em&gt;</code> tag, which usually displays as italics in most browsers. Double asterisks (<code>**</code>) or double underscores (<code>__</code>) are treated as bold using the <code>&lt;strong&gt;</code> tag. To create italic or bold text, simply wrap your words in single/double asterisks/underscores. For example, <code>**My double emphasis text**</code> becomes <strong>My double emphasis text</strong>, and <code>*My single emphasis text*</code> becomes <em>My single emphasis text</em>.</p>'
          }, {
            menuName: 'Code',
            data: '<p>To create inline spans of code, simply wrap the code in backticks (<code>`</code>). Markdown will turn <code>`myFunction`</code> into <code>myFunction</code>.</p>'
          }, {
            menuName: 'Images',
            data: '<p>Markdown image syntax looks a lot like the syntax for links; it is essentially the same syntax preceded by an exclamation point (<code>!</code>). For example, if you want to link to an image at <code>http://github.com/unicorn.png</code> with the alternate text <code>My Unicorn</code>, you would write <code>![My Unicorn](http://github.com/unicorn.png)</code>.</p>'
          }
        ]
      }, {
        menuName: 'Miscellaneous',
        content: [
          {
            menuName: 'Automatic Links',
            data: '<p>If you want to create a link that displays the actual URL, markdown allows you to quickly wrap the URL in <code>&lt;</code> and <code>&gt;</code> to do so. For example, the link <a href="javascript:void(0);">http://github.com/</a> is easily produced by writing <code>&lt;http://github.com/&gt;</code>.</p>'
          }, {
            menuName: 'Escaping',
            data: '<p>If you want to use a special Markdown character in your document (such as displaying literal asterisks), you can escape the character with the backslash (<code>\\</code>). Markdown will ignore the character directly after a backslash.'
          }
        ]
      }
    ];
    $.GollumEditor.defineLanguage('rest', RestructuredText);
    return $.GollumEditor.defineHelp('rest', RestHelp);
  })(jQuery);

}).call(this);
